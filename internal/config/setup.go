package config

import (
	"fmt"
	"os"
	"strings"

	"github.com/urfave/cli/v2"
	"gopkg.in/yaml.v3"
)

const oauthScopes = "read:accounts write:media write:statuses"

func askStr(prompt string, options string, defaultValue string) string {
	for {
		optionsPrompt := ""
		if defaultValue != "" {
			optionsPrompt = fmt.Sprintf(" [%s]", options)
		}
		fmt.Printf("%s%s: ", prompt, optionsPrompt)

		var response string
		fmt.Scanf("%s", &response)

		response = strings.TrimSpace(response)

		if response == "" {
			if defaultValue != "" {
				return defaultValue
			}
		} else {
			return response
		}
	}
}

func askBool(prompt string, defaultValue bool) bool {
	options := "Y/n"
	defaultValueStr := "Y"

	if !defaultValue {
		options = "y/N"
		defaultValueStr = "N"
	}

	for {
		responseStr := strings.ToLower(askStr(prompt, options, defaultValueStr))

		switch responseStr {
		case "yes":
			return true
		case "y":
			return true
		case "ye":
			return true
		case "t":
			return true
		case "true":
			return true
		case "no":
			return false
		case "n":
			return false
		case "f":
			return false
		case "false":
			return false
		}
	}
}

func withRetry(msg string, f func() error) error {
	for {
		err := f()
		if err != nil {
			fmt.Printf("%s: %s\n", msg, err)
			if askBool("Retry?", true) {
				continue
			}
			return err
		}
		return err
	}
}

func SetupCommand() *cli.Command {
	return &cli.Command{
		Name:  "setup",
		Usage: "set up access to Telegram and Mastodon",
		Action: func(ctx *cli.Context) error {
			var c Config

			_ = LoadConfig(&c) // use config as defaults, if it exists

			err := withRetry(
				"Setting up Mastodon access",
				func() error { return setupMastodon(ctx.Context, &c.Mastodon) },
			)
			if err != nil {
				return err
			}

			err = setupTelegram(ctx.Context, &c.Telegram)
			if err != nil {
				return err
			}

			fmt.Println()
			fmt.Println("Generated the following config:")
			fmt.Println()

			err = yaml.NewEncoder(os.Stdout).Encode(c)
			if err != nil {
				return fmt.Errorf("encoding yaml: %w", err)
			}

			fmt.Println()
			path := askStr("Where should I save this config?", "./tg2fedi.yml", "./tg2fedi.yml")
			_, err = os.Stat(path)
			if err == nil {
				if !askBool("File already exists. Overwrite?", false) {
					fmt.Println("Exiting.")
					return nil
				}
			}
			if os.IsNotExist(err) {
				err = nil
			}
			if err != nil {
				return fmt.Errorf("stat: %s: %w", path, err)
			}

			f, err := os.Create(path)
			if err != nil {
				return fmt.Errorf("open: %s: %w", path, err)
			}
			defer f.Close()

			fmt.Fprintln(f, "# generated by \"tg2fedi setup\"")
			err = yaml.NewEncoder(f).Encode(c)
			if err != nil {
				return fmt.Errorf("encoding yaml: %w", err)
			}

			return nil
		},
	}
}
